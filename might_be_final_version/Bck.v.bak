module drawB(Choose,CLOCK_50,finalx,finaly,finalColor)
		
	input Choose;
	input CLOCK_50;	
	

	wire [7:0]Cx,Hx;
	wire [6:0]Cy,Hy;
	wire [14:0]ad,ad2;
	wire [2:0]gameBackground,colorH,starting_image
	wire slower_signal;
	
	output [2:0]finalColor;
	output [7:0]finalx;
	output [6:0]finaly;
	

	
	assign LEDR[0]=Cx[0];
	assign LEDR[1]=Cy[0];
		
//-------------------------------------------------------------------------------------------//				
		counter c(CLOCK_50,Cx,Cy,ad); //counter for 160*120 size//
//-------------------------------------------------------------------------------------------//		  	
		x_ychooser choose(Choose,Cx,Cy,Cx,Cy,finalx,finaly,gameBackground,starting_image,finalColor);		
//-------------------------------------------------------------------------------------------//				
		ramBackground ram(ad,CLOCK_50,0,0,gameBackground); //160*120 size//
//-------------------------------------------------------------------------------------------//		
		Sbackground start(ad,CLOCK_50,0,0,starting_image); //160*120 size//
//-------------------------------------------------------------------------------------------//				
		
		
endmodule 

//.........................................................................//
		
module counter(CLOCK,x_out,y_out,ADDRESS);
	input CLOCK;
	output reg [7:0]x_out;
	output reg [6:0]y_out;
	output reg [14:0]ADDRESS;
		
		
	always@(posedge CLOCK)
		
		begin
         
			if(ADDRESS==15'b100101100000000)
				ADDRESS=0;
				
			
  
			if(x_out == 8'b10011111)
				x_out <= 0;

			else
				x_out <= x_out + 1;

				
			if(y_out == 7'b1111000)
				y_out <= 0;

			else
				begin
						if (x_out == 8'b10011111)
						y_out <= y_out + 1;
				end
				
		
		ADDRESS=ADDRESS+1;

		end
		
endmodule
			
//..............................................................................................//		
		
module x_ychooser(command,xin1,yin1,xin2,yin2,out_x,out_y,color1in,color2in,colorout);

output reg [7:0]out_x;
output reg [6:0]out_y;

input [7:0]xin1,xin2;
input [6:0]yin1,yin2;
input command;
input [2:0]color1in,color2in;

output reg [2:0]colorout;

	always@(*)
	begin
		case(command)
			1'b1: 
			begin
			out_x=xin1;
			out_y=yin1;
			colorout=color1in;
			end

			1'b0: 
			begin
			out_x=xin2;
			out_y=yin2;		
			colorout=color2in;
			end		

		endcase		
	end

endmodule 		