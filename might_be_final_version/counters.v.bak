module counter_4Hz(CLK, resetn, EnableSignal); // 4Hz Enable
	output reg EnableSignal; 
	reg [23:0]cout;
	input CLK, resetn;
	
	always@(posedge CLK)
		begin 
			if(!resetn)
				begin
					cout <= 24'b0;
					EnableSignal <= 0;
				end

			else if(cout == 24'b101111101011110000100000)
				begin
					cout <= 24'b0;
					EnableSignal <= 1;
				end

			else
				begin
					cout <= cout + 1;
					EnableSignal <= 0;
				end

		end
endmodule 


module counter160_64Hz(Enable, Clock, crtState, counter160);
	input Enable, Clock;
	input [1:0]crtState;
	reg [7:0]temp;
	output [7:0]counter160;
	
	always @(posedge Clock)
		begin

		if (crtState ==2'b00)
			temp = 0;
		else 
			if(temp == 8'b10100001)
				begin
					temp <= 0;
				end
			else
				if (Enable) 
					temp <= temp + 1;
		end
		
	assign counter160 = temp;
endmodule

module counter_64Hz(CLK, resetn, EnableSignal); // 64Hz Enable
	output reg EnableSignal; 
	reg [19:0]cout;
	input CLK, resetn;
	
	always@(posedge CLK)
		begin 
			if(!resetn)
				begin
					cout <= 20'b0;
					EnableSignal <= 0;
				end

			else if(cout == 20'b10111110101111000010)
				begin
					cout <= 20'b0;
					EnableSignal <= 1;
				end

			else
				begin
					cout <= cout + 1;
					EnableSignal <= 0;
				end

		end
endmodule

module addressCounter(CLK, resetn, address);
	output reg [9:0]address;
	input CLK, resetn;
	
	always @(posedge CLK)
		begin
			if (!resetn)
				address <= 0;
			
			if (address == 10'b1111111111)
				address <= 0;
			else address <= address +1;
		end	
endmodule